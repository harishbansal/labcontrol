To Do file for labcontrol:

(See NOTES file for how to restart work)

= to do =
 - implement 'farm-status' screen to show overview of farm
   - start with same data as 'farm-status' program
   - with color coded status elements
     - uptime for each board
     - recent/running tests?? (don't tie labcontrol to Jenkins or Fuego)
 - switch lc to use api paths and REST API (?)
   + lc list boards - uses api paths and request module
   + lc <board> power <op> - uses api paths
   - lc <board> (reserve/allocate) /release

 - switch lcserver.py to eliminate old request API (non-json)
   - do_put_object

 - separate web and raw objects pages
   - top level view is for "web ui" views
     do_show
     do_raw
     do_api
   - raw view is json file object views (mostly for debugging)

 - support reservations
 - support users
 - allow users to connect resources to boards
 - allow users to disconnect resources from boards
 - allow users register boards
 - allow users register resources
 - allow users to update board info
 - allow users to update resource info

Things that work:
 + lc list boards - using action api
 + lc list resources - using action api
 + lc <board> power status - using action api
 + lc <board> power on - using action api
 + lc <board> power off - using action api
 + lc <board> power reboot - using action api
 + wget -q -O- http://localhost:8000/api/v0.2/devices - using path api
 + wget .../api/devices/bbb
 + wget .../api/devices/bbb/power
 + wget .../api/devices/bbb/power/status
 + wget .../api/devices/bbb/power/on
 + wget .../api/devices/bbb/power/off
 + wget .../api/devices/bbb/power/reboot

= high level to dos =
 - define schema for commands
   - see https://fuegotest.org/wiki/LabControl_project
 - define lab objects/resources
   + define boards statically
   + power controller
   - bus controller
   - power monitor
   - serial connection
   - network connection
   - console
 - define object attributes
   - boards: name, lab, description, power-controller
 - define resource verbs
   - turn on/turn off
   - connect
   - configure
   - start/stop
 - define labcontrol operations
   - query objects/resources
 - create better web UI
   - list of boards
   - list of my boards
   - board page:
     - window for interactive console or terminal
     - power status that updates autmoatically
     - window for video from with board
     - window for video of camera pointed at board
     - list of power operations
     - list of connected resources

Postponed for now:
 - add security
   - require authentication itself to add, update or remove requests
   - require authentication to add tests or binary packages

 - eliminate pages directory
   - don't create tbwiki file for request in do_put_request

= security notes =
  - use otp file (lab-<labname>.otp) to authenticate operations
    - use for only certain operations:
      - submission of requests, tests, binary-packages
      - change of state for requests
       (others operations don't need security, unless server is private)
         - is this correct?
   - algorithm to use the file is:
     - on client side:
         - select offset
           - generate random offset (multiple of 32)
         - seek to that offset
           - read file (32 bytes), is value is zero, start over
             - if start over too many times, search linearly for next
                non-zero address, starting from last seek position
           - zero out the bytes at the offset
           - sync file
         - send (labname, offset and value) with operation
       - on server side:
         - select file using labname
         - seek to offset read value
           - keep a log of operations, per lab: IP, offset, time
           - prevent DOS attack by limiting operations to once per second
         - zero out bytes at the offset
         - compare sent and read values
           - if no match, reject request
           - if match, accept request
       - create tool to show percent used of otp file
